From ff9b8a5526b8e3400638d7e266d40574230ccff6 Mon Sep 17 00:00:00 2001
From: awakening <lucidsunlight@yandex.ru>
Date: Sun, 20 Jan 2019 21:54:03 +0700
Subject: [PATCH 1/2] Pass messenger to audio sink

---
 vendor/anbox/src/anbox/audio/server.cpp            | 9 ++++++---
 vendor/anbox/src/anbox/platform/base_platform.h    | 3 ++-
 vendor/anbox/src/anbox/platform/null/platform.cpp  | 3 ++-
 vendor/anbox/src/anbox/platform/null/platform.h    | 2 +-
 vendor/anbox/src/anbox/platform/sdl/audio_sink.cpp | 3 ++-
 vendor/anbox/src/anbox/platform/sdl/audio_sink.h   | 6 ++++--
 vendor/anbox/src/anbox/platform/sdl/platform.cpp   | 4 ++--
 vendor/anbox/src/anbox/platform/sdl/platform.h     | 2 +-
 8 files changed, 20 insertions(+), 12 deletions(-)

--- a/vendor/anbox/src/anbox/audio/server.cpp
+++ b/vendor/anbox/src/anbox/audio/server.cpp
@@ -31,8 +31,10 @@
 namespace {
 class AudioForwarder : public anbox::network::MessageProcessor {
  public:
-  AudioForwarder(const std::shared_ptr<anbox::audio::Sink> &sink) :
-    sink_(sink) {
+  AudioForwarder(const std::shared_ptr<anbox::audio::Sink> &sink, 
+                 const std::shared_ptr<anbox::network::LocalSocketMessenger> &messenger) :
+    sink_(sink), 
+    messenger_(messenger) {
   }
 
   bool process_data(const std::vector<std::uint8_t> &data) override {
@@ -42,6 +44,7 @@
 
  private:
   std::shared_ptr<anbox::audio::Sink> sink_;
+  std::shared_ptr<anbox::network::LocalSocketMessenger> messenger_;
 };
 }
 
@@ -80,7 +83,7 @@
 
   switch (client_info.type) {
   case ClientInfo::Type::Playback:
-    processor = std::make_shared<AudioForwarder>(platform_->create_audio_sink());
+    processor = std::make_shared<AudioForwarder>(platform_->create_audio_sink(messenger), messenger);
     break;
   case ClientInfo::Type::Recording:
     break;
--- a/vendor/anbox/src/anbox/platform/base_platform.h
+++ b/vendor/anbox/src/anbox/platform/base_platform.h
@@ -20,6 +20,7 @@
 
 #include "anbox/graphics/rect.h"
 #include "anbox/wm/window_state.h"
+#include "anbox/network/local_socket_messenger.h"
 
 #include <memory>
 
@@ -53,7 +54,7 @@
   virtual void set_clipboard_data(const ClipboardData &data) = 0;
   virtual ClipboardData get_clipboard_data() = 0;
 
-  virtual std::shared_ptr<audio::Sink> create_audio_sink() = 0;
+  virtual std::shared_ptr<audio::Sink> create_audio_sink(const std::shared_ptr<anbox::network::LocalSocketMessenger> &messenger) = 0;
   virtual std::shared_ptr<audio::Source> create_audio_source() = 0;
 
   virtual void set_renderer(const std::shared_ptr<Renderer> &renderer) = 0;
--- a/vendor/anbox/src/anbox/platform/null/platform.cpp
+++ b/vendor/anbox/src/anbox/platform/null/platform.cpp
@@ -48,7 +48,8 @@
   return ClipboardData{};
 }
 
-std::shared_ptr<audio::Sink> NullPlatform::create_audio_sink() {
+std::shared_ptr<audio::Sink> NullPlatform::create_audio_sink(const std::shared_ptr<network::LocalSocketMessenger> &messenger) {
+  (void) messenger;
   ERROR("Not implemented");
   return nullptr;
 }
--- a/vendor/anbox/src/anbox/platform/null/platform.h
+++ b/vendor/anbox/src/anbox/platform/null/platform.h
@@ -31,7 +31,7 @@
       const std::string &title) override;
   void set_clipboard_data(const ClipboardData &data) override;
   ClipboardData get_clipboard_data() override;
-  std::shared_ptr<audio::Sink> create_audio_sink() override;
+  std::shared_ptr<audio::Sink> create_audio_sink(const std::shared_ptr<network::LocalSocketMessenger> &messenger) override;
   std::shared_ptr<audio::Source> create_audio_source() override;
   void set_renderer(const std::shared_ptr<Renderer> &renderer) override;
   void set_window_manager(const std::shared_ptr<wm::Manager> &window_manager) override;
--- a/vendor/anbox/src/anbox/platform/sdl/audio_sink.cpp
+++ b/vendor/anbox/src/anbox/platform/sdl/audio_sink.cpp
@@ -27,7 +27,8 @@
 }
 
 namespace anbox::platform::sdl {
-AudioSink::AudioSink() :
+AudioSink::AudioSink(const std::shared_ptr<network::LocalSocketMessenger> &messenger) :
+  messenger_(messenger),
   device_id_(0),
   queue_(max_queue_size) {
 }
@@ -112,4 +113,4 @@
   graphics::Buffer buffer{data.data(), data.data() + data.size()};
   queue_.push_locked(std::move(buffer), l);
 }
-}
\ No newline at end of file
+}
--- a/vendor/anbox/src/anbox/platform/sdl/audio_sink.h
+++ b/vendor/anbox/src/anbox/platform/sdl/audio_sink.h
@@ -21,13 +21,14 @@
 #include "anbox/audio/sink.h"
 #include "anbox/graphics/buffer_queue.h"
 #include "anbox/platform/sdl/sdl_wrapper.h"
+#include "anbox/network/local_socket_messenger.h"
 
 #include <thread>
 
 namespace anbox::platform::sdl {
 class AudioSink : public audio::Sink {
  public:
-  AudioSink();
+  AudioSink(const std::shared_ptr<network::LocalSocketMessenger> &messenger);
   ~AudioSink();
 
   void write_data(const std::vector<std::uint8_t> &data) override;
@@ -38,7 +39,8 @@
   void read_data(std::uint8_t *buffer, int size);
 
   static void on_data_requested(void *user_data, std::uint8_t *buffer, int size);
-
+  
+  std::shared_ptr<anbox::network::LocalSocketMessenger> messenger_;
   std::mutex lock_;
   SDL_AudioSpec spec_;
   SDL_AudioDeviceID device_id_;
--- a/vendor/anbox/src/anbox/platform/sdl/platform.cpp
+++ b/vendor/anbox/src/anbox/platform/sdl/platform.cpp
@@ -500,8 +500,8 @@
   return data;
 }
 
-std::shared_ptr<audio::Sink> Platform::create_audio_sink() {
-  return std::make_shared<AudioSink>();
+std::shared_ptr<audio::Sink> Platform::create_audio_sink(const std::shared_ptr<network::LocalSocketMessenger> &messenger) {
+  return std::make_shared<AudioSink>(messenger);
 }
 
 std::shared_ptr<audio::Source> Platform::create_audio_source() {
--- a/vendor/anbox/src/anbox/platform/sdl/platform.h
+++ b/vendor/anbox/src/anbox/platform/sdl/platform.h
@@ -65,7 +65,7 @@
   void set_clipboard_data(const ClipboardData &data) override;
   ClipboardData get_clipboard_data() override;
 
-  std::shared_ptr<audio::Sink> create_audio_sink() override;
+  std::shared_ptr<audio::Sink> create_audio_sink(const std::shared_ptr<network::LocalSocketMessenger> &messenger) override;
   std::shared_ptr<audio::Source> create_audio_source() override;
 
   bool supports_multi_window() const override;
